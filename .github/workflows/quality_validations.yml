name: Validação de Qualidade
run-name: PR ${{ github.event.head_commit.message }} enviado por ${{ github.actor }} para branch ${{ github.event.pull_request.base.ref }}

on:    
  pull_request:
    types: [opened, edited, synchronize]
    branches:
        - main
        - Staging
        - UAT
        - SIT
jobs:
 
 quality-Apex:
    name: Qualidade APEX
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.apex_status.outcome }}  
    permissions:
      checks: write
      contents: read 

    steps:
    
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: instalar as dependencias dos pacotes
        run: |
          npm install

      - name: Instalar the SFDX CLI
        run: |
          npm install sfdx-cli --global

      - name: Instalar o SFDX CLI Scanner
        run: |
          echo 'y' | sfdx plugins:install @salesforce/sfdx-scanner
  
      - name: Rodar Scanner para Salesforce Apex
        id: apex_status
        run: |
          sfdx scanner:run -f junit -s 3 --normalize-severity -t "force-app" -e "pmd" -c "Design,Best Practices,Code Style,Performance,Security" --outfile ./reports/scan-apex.xml

      - uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: cli-scan-report
          path: reports/scan-apex.xml

      - name: Publicar resultado dos testes sumarizado
        uses: mikepenz/action-junit-report@v4
        if: success() || failure()
        with:
          report_paths: 'reports/scan-apex.xml' 
          check_name: "Qualidade de código Apex"
          
      - name: Detalhes dos testes
        uses: test-summary/action@v2
        if: success() || failure()
        with:
           paths: reports/scan-apex.xml
  
 quality-LWC:  
    name: Qualidade LWC
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.lwc_status.outcome }}   
    permissions:
      checks: write
      contents: read 

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Instalar as dependencias dos pacotes
        run: |
          npm install

      - name: Instalar the SFDX CLI
        run: |
          npm install sfdx-cli --global

      - name: Instalar o SFDX CLI Scanner
        run: |
          echo 'y' | sfdx plugins:install @salesforce/sfdx-scanner

      - name: Validacao
        id: lwc_status
        run: |
          sfdx scanner:run -f junit -s 3 -t "force-app/main/default/lwc" -e "eslint-lwc" -c "problem" --outfile ./reports/scan-lwc.xml

      - uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: cli-scan-report
          path: reports/scan-lwc.xml

      - name: Publicar resultado dos testes sumarizado
        uses: mikepenz/action-junit-report@v4
        if: success() || failure()
        with:
          report_paths: 'reports/scan-lwc.xml' 
          check_name: "Qualidade de código LWC"
            
      - name: Detalhes dos testes
        if: success() || failure()
        uses: test-summary/action@v2
        with:
          paths: reports/scan-lwc.xml

 testes-apex-plataforma:
    name: Checkonly com testes do apex
    runs-on: ubuntu-latest
    needs: [quality-Apex, quality-LWC]
    outputs:
      output1: ${{ steps.apex_test_classes.outcome }}
    steps:

     - uses: actions/checkout@v3
       with:
        fetch-depth: 0

     - uses: actions/setup-node@v3
       with:
         node-version: '16'
     
     - name: 'Instalação SFDX'
       run: | 
         npm install @salesforce/cli --global
      
     - name: 'Autenticação SIT'
       if: ${{ github.event.pull_request.base.ref == 'SIT'}}
       run: 
         sf org login jwt --username ${{ secrets.SIT_USERNAME}} --jwt-key-file jwt/server.key --client-id ${{ secrets.SIT_KEY}} --alias SFDX  --instance-url ${{ secrets.SDBX_URL}}
     
     - name: 'Autenticação UAT'
       if: ${{ github.event.pull_request.base.ref == 'UAT'}}
       run: 
          sf org login jwt --username ${{ secrets.UAT_USERNAME}} --jwt-key-file jwt/server.key --client-id ${{ secrets.UAT_KEY}} --alias SFDX  --instance-url ${{ secrets.SDBX_URL}}

     - name: 'Autenticação Staging'
       if: ${{ github.event.pull_request.base.ref == 'Staging'}}
       run: 
          sf org login jwt --username ${{ secrets.STAGING_USERNAME}} --jwt-key-file jwt/server.key --client-id ${{ secrets.STAGING_KEY}} --alias SFDX  --instance-url ${{ secrets.SDBX_URL}}
   
     - name: 'Autenticação PROD'
       if: ${{ github.event.pull_request.base.ref == 'main'}}
       run: 
          sf org login jwt --username ${{ secrets.PROD_USERNAME}} --jwt-key-file jwt/server.key --client-id ${{ secrets.PROD_KEY}} --alias SFDX  --instance-url ${{ secrets.PROD_URL}}
    
     - name: 'Deploy the entire branch to Integration org'
       id: apex_test_classes
       run: sf project deploy start -d force-app -o SFDX -l RunLocalTests --dry-run --ignore-conflicts 

 comunicacoes:
    name: Notificações e alertas
    runs-on: ubuntu-latest
    needs: [testes-apex-plataforma, quality-LWC, quality-Apex]
    if: always()
    steps:

    - name: getPrUrl
      id: pr-url
      uses: ammaratef45/pr-url-action@v1

    - name: display
      run: echo ${{ steps.pr-url.outputs.url }} 
      
    - uses: ravsamhq/notify-slack-action@v2
      if: ${{ needs.quality-Apex.outputs.output1 == 'failure'  || needs.quality-LWC.outputs.output1 == 'failure' }}
      with:
          status: ${{ job.status }}
          token: ${{ github.token }}
          notification_title: 'Vulnerabilidades encontradas na PR ${{ github.event.number }} enviada para a branch ${{ github.event.pull_request.base.ref }}'
          message_format: ':large_orange_diamond: ${{ steps.pr-url.outputs.url }},  Necessária ação do time de segurança, acesse a PR'
          footer: 'link do repositório <{repo_url}|{repo}>'
      env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_SLACK }}
  
    - uses: ravsamhq/notify-slack-action@v2
      if: ${{ needs.quality-Apex.outputs.output1 == 'failure'  || needs.quality-LWC.outputs.output1 == 'failure' || needs.testes-apex-plataforma.outputs.output1 == 'failure' }}
      with:
          status: ${{ job.status }}
          token: ${{ github.token }}
          notification_title: 'A PR ${{ github.event.number }} para a branch ${{ github.event.pull_request.base.ref }} foi executada com erro :x:'
          message_format: ':x: *{workflow}* {status_message} enviado por ${{ github.actor }} com os seguintes resultados de teste apex :x: e lwc :x: '
          footer: link para a PR <${{ steps.pr-url.outputs.url }}>"
      env:
          SLACK_WEBHOOK_URL: ${{ secrets.RELEASE_TEAM_SLACK }}

    - uses: ravsamhq/notify-slack-action@v2
      if: ${{ needs.quality-Apex.outputs.output1 == 'success' && needs.quality-LWC.outputs.output1 == 'success' && needs.testes-apex-plataforma.outputs.output1 == 'success'}}
      with:
          status: ${{ needs.quality-Apex.outputs.output1 }}
          token: ${{ github.token }}
          notification_title: 'A PR ${{ github.event.number }} para a branch ${{ github.event.pull_request.base.ref }} foi executada com sucesso :heavy_check_mark:'
          message_format: ':heavy_check_mark: *{workflow}* {status_message} enviado por ${{ github.actor }} com os seguintes resultados de teste apex :heavy_check_mark: e lwc :heavy_check_mark:'
          footer: link para a PR <${{ steps.pr-url.outputs.url }}>"
      env:
          SLACK_WEBHOOK_URL: ${{ secrets.RELEASE_TEAM_SLACK }}